using ScraperApp.Handlers;
using ScraperApp.Utils;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ScraperApp
{
    public class ScraperApp
    {
        public HashSet<string> LinksToHandle = new HashSet<string>() { "" };
        public List<string> HandledLinks = new List<string>();
        private readonly ILinkHandler _linkHandler;

        public ScraperApp(ILinkHandler linkHandler)
        {
            _linkHandler = linkHandler;
        }

        public async Task<List<string>> Run()
        {
            //Create a simple rootfolder
            var rootFolder = FileHandler.CreateRootFolder("tretton37");
            while(LinksToHandle.Count > 0)
            {
                var tasks = new List<Task<List<string>>>();
                //Add tasks for links in parallel
                LinksToHandle.AsParallel().ForAll(link =>
                {
                    tasks.Add(Task.Run(() => _linkHandler.HandleLink(link, rootFolder)));
                });
                //Update HandledLinks
                HandledLinks.AddRange(LinksToHandle);
                LinksToHandle.Clear();

                //Add new links to handle generated by this iterations results
                var aggregationTask = Task.WhenAll(tasks).ContinueWith(antecedent =>
                {
                    //Make sure not to handle same links twice
                    foreach (var links in antecedent.Result)
                    {
                        foreach (var link in links)
                        {
                            link.RemoveHtmlEnding();
                        }
                        var linksToHandle = links.Except(HandledLinks).ToList();
                        LinksToHandle.UnionWith(linksToHandle);
                    }
                });
                try
                {
                    await aggregationTask;
                }
                //If exceptions occur, access and print all exceptions not just the first one
                catch (Exception ex)
                {
                    if (aggregationTask?.Exception?.InnerExceptions != null && aggregationTask.Exception.InnerExceptions.Any())
                    {
                        Console.WriteLine("A number of Exceptions occured!");
                        foreach (var innerException in aggregationTask.Exception.InnerExceptions)
                        {
                            Console.WriteLine(innerException.Message);
                        }
                    }
                    else
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            return HandledLinks;
        }
    }
}